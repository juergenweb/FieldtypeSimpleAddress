<?php namespace ProcessWire;

/**
 * Inputfield to enter address data
 *
 * @author JÃ¼rgen Kern
 * @license Licensed under MIT
 */

class InputfieldSimpleAddress extends Inputfield
{

    public static function getModuleInfo()
    {
        return [
          'title' => 'Inputfield SimpleAddress',
          'summary' => 'Renders various input fields for entering address data.',
          'version' => 1,
          'permanent' => false,
          'requires' => [
              'FieldtypeSimpleAddress',
              'PHP>=7.0.0',
              'ProcessWire>=3'
            ],
          'author' => 'JÃ¼rgen Kern'
      ];
    }


    public function __construct()
    {
        // set default values for inputfield properties
        $this->set('input_street', '');
        $this->set('input_number', '');
        $this->set('input_postalcode', '');
        $this->set('input_city', '');
        $this->set('input_state', '');
        $this->set('input_country', '');
        parent::__construct();
    }

    /**
    * Per the Module interface, init() is called when the system is ready for API usage
    */
    public function init()
    {
        //Add CSS and JS files
        $this->config->styles->add(config()->urls->{$this->className} . 'simpleaddress.css');
        //Set default values for field configuration properties to make them reachable
        $this->set('input_required', []);
        return parent::init();
    }

    public static function getLabels()
    {
      return [
        'street' => _x('Street', 'simpleaddress'),
        'number' => _x('Number', 'simpleaddress'),
        'postalcode' => _x('Postalcode', 'simpleaddress'),
        'city' => _x('City', 'simpleaddress'),
        'state' => _x('State', 'simpleaddress'),
        'country' => _x('Country', 'simpleaddress')
      ];
    }


    /**
    * Method to render the required asterisk on required inputfields depending on configuration
    */
    private function renderRequired(string $fieldname): string
    {
      if(in_array($fieldname, $this->input_required)){
        return '*';
      }
      return '';
    }


    /**
    * Render the inputs in the backend
    * @return string
    */
    public function ___render(): string
    {
        $name = $this->attr('name'); // name of the inputfield

        $out = '';

        $value = $this->attr('value') ? $this->attr('value') : new SimpleAddress();

        $out .= '<div class="addressline">';
          $out .= '<div class="inputfield_street">';
            $out .= '<label class="InputfieldHeader uk-form-label InputfieldStateToggle">'.$this->getLabels()['street'].$this->renderRequired('street').'</label>';
            $out .= '<input id="'.$name.'_street" type="text" name="'.$name.'_street" max="255" value="'.$value->street.'">';
          $out .= '</div>';
          $out .= '<div class="inputfield_number">';
            $out .= '<label class="InputfieldHeader uk-form-label InputfieldStateToggle">'.$this->getLabels()['number'].$this->renderRequired('number').'</label>';
            $out .= '<input id="'.$name.'_number" type="text" name="'.$name.'_number" max="255" value="'.$value->number.'">';
          $out .= '</div>';
        $out .= '</div>';

        $out .= '<div class="addressline">';
          $out .= '<div class="inputfield_postalcode" >';
            $out .= '<label class="InputfieldHeader uk-form-label InputfieldStateToggle">'.$this->getLabels()['postalcode'].$this->renderRequired('postalcode').'</label>';
            $out .= '<input id="'.$name.'_postalcode" type="text" name="'.$name.'_postalcode" max="255" value="'.$value->postalcode.'">';
          $out .= '</div>';
          $out .= '<div class="inputfield_city" >';
            $out .= '<label class="InputfieldHeader uk-form-label InputfieldStateToggle">'.$this->getLabels()['city'].$this->renderRequired('city').'</label>';
            $out .= '<input id="'.$name.'_city" type="text" name="'.$name.'_city" max="255" value="'.$value->city.'">';
          $out .= '</div>';
        $out .= '</div>';

        $out .= '<div class="addressline">';
          $out .= '<div class="inputfield_state">';
            $out .= '<label class="InputfieldHeader uk-form-label InputfieldStateToggle">'.$this->getLabels()['state'].$this->renderRequired('state').'</label>';
            $out .= '<input id="'.$name.'_state" type="text" name="'.$name.'_state" max="255" value="'.$value->state.'">';
          $out .= '</div>';
        $out .= '</div>';

        $out .= '<div class="addressline">';
          $out .= '<div class="inputfield_country">';
            $out .= '<label class="InputfieldHeader uk-form-label InputfieldStateToggle">'.$this->getLabels()['country'].$this->renderRequired('country').'</label>';
            $out .= '<input id="'.$name.'_country" type="text" name="'.$name.'_country" max="255" value="'.$value->country.'">';
          $out .= '</div>';
        $out .= '</div>';

        return $out;

    }


    /**
     * Process the input after a form submission($_POST or $_GET data) took place. Sanitize/validate it, and populate the value back to this inputfield.
     * First line of defense for values coming directly from a form
     * That function literally takes the value from $input and populates it to the 'value' attribute of the Inputfield object.
     * @param WireInputData $input
     * @return this
     *
     */
    public function ___processInput(WireInputData $input)
    {
        $name = $this->attr('name'); // self choosen name of the inputfield
        $value = $this->attr('value');

        //create an array of the inputfield names to set processed values back afterwards
        $inputfields = [ // name in db => name input element
          'street' => $name . '_street',
          'number' => $name . '_number',
          'postalcode' => $name . '_postalcode',
          'city' => $name . '_city',
          'country' => $name . '_country',
          'state' => $name . '_state'
        ];

        foreach ($inputfields as $key => $name) {
          //check for required inputs
          $label = $this->getLabels()[$key];
          //sanitize all values as string and put them back to the input
          $value->set($key, (string) $input->$name);
          //track changes in the values
          $this->trackChange('value');
          //start validation
          if(in_array($key, $this->input_required)){
            if(empty($value[$key])){
              $this->error(sprintf(_x('Field "%s" is required', 'simpleaddress'), $label));
            }
          }
        }

        return $this;

      }


      /**
       * Add additional configuration fields
       *
       * @return InputfieldWrapper
       *
       */
      // Add additional configuration fields
      public function ___getConfigInputfields(): InputfieldWrapper
      {

        //get all parent input fields
          $inputfields = parent::___getConfigInputfields();

          // get rid of required config field, because we cannot use it here
          $inputfields->remove('required');

          // checkbox field to make specific fields required
          $f = $this->modules->get('InputfieldCheckboxes');
          $f->label = _x('Required fields', 'simpleaddress');
          $f->attr('name', 'input_required');
          $options = [
            'street' => _x('Street', 'simpleaddress'),
            'number' => _x('Number', 'simpleaddress'),
            'postalcode' => _x('Postalcode', 'simpleaddress'),
            'city' => _x('City', 'simpleaddress'),
            'state' => _x('State', 'simpleaddress'),
            'country' => _x('Country', 'simpleaddress')
          ];
          $values = (isset($this->hasField->data['input_required'])) ? $this->hasField->data['input_required'] : [];
          foreach($options as $value => $label) {
            $checked = (in_array($value,$values)) ? 'checked' : '';
            $f->addOption($value, $label, ['checked' => $checked]);
          }
          $f->description = _x('If checked the input is required.', 'simpleaddress');
          $inputfields->append($f);

          // add inputfield markup for api notes
          $f = $this->modules->get('InputfieldMarkup');
          $f->label = _x('API Notes', 'simpleaddress');
          $f->description = _x('The following can be used in your templates:', 'simpleaddress');
          $f->value .= '<pre>';
          $f->value .= '$page->' . $this->name . '->street' . PHP_EOL;
          $f->value .= '$page->' . $this->name . '->number' . PHP_EOL;
          $f->value .= '$page->' . $this->name . '->postalcode' . PHP_EOL;
          $f->value .= '$page->' . $this->name . '->city' . PHP_EOL;
          $f->value .= '$page->' . $this->name . '->state' . PHP_EOL;
          $f->value .= '$page->' . $this->name . '->country' . PHP_EOL;
          $f->value .= '$page->' . $this->name . PHP_EOL;
          $f->value .= '</pre>';
          $inputfields->add($f);

          // output all input fields (parent and custom)
          return $inputfields;
      }


      /**
       * Allow these fields to get overwritten by user on per template base
       * @param \ProcessWire\Field $field
       * @return array
       *
       */
      public function getConfigAllowContext(Field $field): array
      {
          return [
            'input_required'
          ];
      }

}
